/*
 * Copyright 2013 Keith D Swenson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors Include: Shamim Quader, Sameer Pradhan, Kumar Raja, Jim Farris,
 * Sandia Yang, CY Chen, Rajiv Onat, Neal Wang, Dennis Tam, Shikha Srivastava,
 * Anamika Chaudhari, Ajay Kakkar, Rajeev Rastogi
 */

package org.socialbiz.cog;


import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;

import javax.swing.text.MutableAttributeSet;
import javax.swing.text.html.HTML;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.parser.ParserDelegator;

public class HtmlToWikiConverter {

    public static String baseURL = null;
    /**
     * This method takes a HTML String generated by the Editor and will use
     * {@link HTMLParser} to parse the HTML to generate WIKI text from that.
     *
     * @param htmlValue
     * @return
     * @throws Exception
     */
    public String htmlToWiki(String baseURL,String htmlValue) throws Exception {
        HtmlToWikiConverter.baseURL = baseURL;
        // There was some problem saving &nbsp; in XML file so replaced it with
        // the space.
        htmlValue = htmlValue.replaceAll( "&nbsp;", " " ).replaceAll( "\r", "" );

        Reader reader = new StringReader( htmlValue );
        HTMLEditorKit.Parser parser = new ParserDelegator();
        HTMLParser htmlParser = new HTMLParser();
        parser.parse( reader, htmlParser, true );
        reader.close();
        String wikiValue = htmlParser.wikiText.toString();
        wikiValue= wikiValue.trim();
        return wikiValue;
    }

}

/**
 * This class is subclass of {@link HTMLEditorKit.ParserCallback}. This class
 * implemented method to parse HTML and convert WIKI text from that.
 *
 */
class HTMLParser extends HTMLEditorKit.ParserCallback {

    private String href = "";
    private StringBuffer linkText = null;
    private boolean isHREF = false;

    private int BULLETS_INDENTATION_LEVEL = 0;
    private boolean isBold      = false;
    private boolean isItalics   = false;
    private String  inBlock     = null;

    //these are set instead of outputting a style prefix
    //and they actually cause the output when the first non-whitespace
    //text is output
    private boolean prepareBold = false;
    private boolean prepareItal = false;
    private boolean prepareLineFeed = false;

    StringBuffer wikiText = new StringBuffer();

    public void handleText(char[] data, int pos)
    {

        String tempStr = new String(data);
        tempStr = tempStr.trim();
        if (tempStr.length()==0)
        {
            return;   //don't do any processing below because not non-white
        }

        //none of these should be output unless the is non-empty text
        if (inBlock==null)
        {
            //outputting text without any block should cause a paragraph block to start
            startBlock("\n");
        }
        if (prepareLineFeed)
        {
            wikiText.append("\n:");
            prepareLineFeed = false;
        }
        if (prepareBold)
        {
            wikiText.append("__");
            prepareBold = false;
            isBold = true;
        }
        if (prepareItal)
        {
            wikiText.append("''");
            prepareItal = false;
            isItalics = true;
        }
        if (isHREF)
        {
            //if you are inside a link, then append the text to this
            linkText.append(data);
        }
        else
        {
            //walk through and escape special characters that would
            //otherwise cause possible styling errors
            for (char ch : data)
            {
                wikiText.append( ch );
            }
        }
    }

    //text block is H1, H2, H3, P
    private void startBlock(String blockType)
    {
        if (inBlock != null)
        {
            //this is a clean up situation ... a block was started without concluding another
            //block, this could happen if it put one block inside another block
            //this code will terminate the outer block, and start a new block for the inner.
            concludeBlock();
        }
        inBlock = blockType;
        if ("*".equals(blockType))
        {
            for (int i = 0; i < BULLETS_INDENTATION_LEVEL; i++)
            {
                wikiText.append( "*" );
            }
            wikiText.append( " " );
        }
        else
        {
            wikiText.append(blockType);
        }
    }

    private void concludeBlock()
    {
        if (isItalics)
        {
            wikiText.append("''");
        }
        if (isBold)
        {
            wikiText.append("__");
        }
        if (inBlock != null)
        {
            wikiText.append("\n");
        }
        inBlock = null;
        prepareBold = false;
        isBold = false;
        prepareItal = false;
        isItalics = false;
        prepareLineFeed = false;
    }


    public void handleStartTag(HTML.Tag t, MutableAttributeSet a, int pos) {
        if (isHREF)
        {
            //when we are inside a hyperlink, ALL tags are ignored
            return;
        }
        if (t == HTML.Tag.H1)
        {
            startBlock("!!!" );
        }
        else if (t == HTML.Tag.H2)
        {
            startBlock("!!" );
        }
        else if (t == HTML.Tag.H3)
        {
            startBlock("!" );
        }
        else if (t == HTML.Tag.P)
        {
            startBlock("\n");
        }
        else if (t == HTML.Tag.PRE)
        {
            startBlock("{{{\n");
        }
        else if (t == HTML.Tag.LI)
        {
            startBlock("*");
        }
        else if (t == HTML.Tag.UL)
        {
            concludeBlock();
            BULLETS_INDENTATION_LEVEL++;
        }
        else if (t == HTML.Tag.A)
        {
            Object o = a.getAttribute( HTML.Attribute.HREF );
            if (o!=null)
            {
                href = o.toString().trim();
            }
            else
            {
                href= "";
            }

            //it is considered an external link, if there are any slashes in it at all.
            //This means that you can not make project links to projects that have names with slash
            //in them.  You enter the project name without the slash and it should work, since project
            //search is done on a sanitized string that has all punctuation removed.
            boolean isExternal = (href.indexOf("/")>=0);


            if(!isExternal)
            {
                /*
                 * This is required when user will try to link an existing page in the application.
                 * Editor will pass an encoded URL in that case. for example: If user will try to link
                 * Knowledge Base Main Page then the editor will generate URL as Knowledge%20Base%20Main%20Page
                 * In this case the @see SectionUtil#outputLink(org.socialbiz.cog.AuthRequest,java.lang.String)
                 * will not be able to find the existing page even if it's there. So when URL is internal then
                 * we need to decode it first. I am not sure whether this is the best approach or not.
                 */
                try
                {
                    href = URLDecoder.decode( href, "UTF-8").trim();
                }
                catch (UnsupportedEncodingException e)
                {
                    //it simply can't be that UTF-8 is not supported
                }
            }else{
                if(href.length() > 0 && !(href.startsWith("http")|| href.startsWith("www"))){
                    try {
                        String[] container = href.split("/");
                        if(container != null && container.length > 1){
                            NGContainer ngb = NGPageIndex.getContainerByKey(container[0]);
                            NGContainer ngp = NGPageIndex.getContainerByKey(container[1]);
                            if(ngb != null && ngp != null){
                                href = HtmlToWikiConverter.baseURL + "t/" +href;
                            }
                        }
                    } catch (Exception e) {
                        //Don't need to do anything.
                    }
                }
            }
            isHREF = true;
            linkText = new StringBuffer();
        }
        else if (t == HTML.Tag.B || t == HTML.Tag.STRONG)
        {
            prepareBold = true;
        }
        else if (t == HTML.Tag.I || t == HTML.Tag.EM)
        {
            prepareItal = true;
        }
        else if (t == HTML.Tag.SPAN)
        {
            //apparently the text editor we are using will inclue span tags for
            //certain kinds of styling, so need to respond.  Difficult, however
            //to match the right end tag when there are multiple nested spans.
            //Might consider tracking each span as nested in.
            String clazz = "";
            if (a.getAttribute( HTML.Attribute.STYLE ) != null)
            {
                clazz = a.getAttribute( HTML.Attribute.STYLE ).toString();
            }
            if (clazz.contains( "bold;" ) && !isBold)
            {
                prepareBold = true;
            }
            if (clazz.contains( "italic;" ) && !isItalics)
            {
                prepareItal = true;
            }

        }
    }

    public void handleEndTag(HTML.Tag t, int pos) {
        if (t == HTML.Tag.A)
        {
            String lText = linkText.toString().trim();
            if (lText.length()>0)
            {
                //If the text is a equal to the href, then this is a simple project link
                //which can be compressed to just the project name between square brackets
                if (lText.equals(href))
                {
                    href=null;  //suppress the link
                }
                wikiText.append("[");
                wikiText.append(lText);
                if (href!=null && href.length()>0)
                {
                    wikiText.append("|");
                    wikiText.append(href);
                }
                wikiText.append("]");
            }
            isHREF = false;
            linkText = null;
            href=null;
        }
        else if (isHREF)
        {
            //when we are inside a hyperlink, ALL tags are ignored (except the end of hyperlink)
            return;
        }
        else if (t == HTML.Tag.H1 || t == HTML.Tag.H2
            || t == HTML.Tag.H3 || t == HTML.Tag.P)
        {
            concludeBlock();
        }
        else if (t == HTML.Tag.PRE)
        {
            concludeBlock();
            wikiText.append("\n}}}" );
        }
        else if (t == HTML.Tag.UL)
        {
            concludeBlock();
            BULLETS_INDENTATION_LEVEL--;
        }
        else if (t == HTML.Tag.LI)
        {
            concludeBlock();
        }
        else if (t == HTML.Tag.B || t == HTML.Tag.STRONG)
        {
            if (isBold)
            {
                wikiText.append("__");
            }
            isBold = false;
            prepareBold = false;
        }
        else if (t == HTML.Tag.I || t == HTML.Tag.EM)
        {
            if (isItalics)
            {
                wikiText.append("''");
            }
            isItalics = false;
            prepareItal = false;
        }
        else if (t == HTML.Tag.SPAN)
        {
            /**
             * This will basically handle the span tag. The WYSIWYG editor
             * generate span tag for bold and italic text closing span tag will
             * be replaced accordingly.
             *
             */
            if (isItalics)
            {
                wikiText.append( "''" );
                isItalics = false;
            }
            prepareItal = false;
            if (isBold)
            {
                wikiText.append( "__" );
                isBold = false;
            }
            prepareBold = false;
        }
    }

    public void handleSimpleTag(HTML.Tag t, MutableAttributeSet a, int pos) {
        if (t == HTML.Tag.BR)
        {
            prepareLineFeed = true;
        }
        else if (t == HTML.Tag.HR)
        {
            wikiText.append( "\n----\n" );
        }
    }

}
